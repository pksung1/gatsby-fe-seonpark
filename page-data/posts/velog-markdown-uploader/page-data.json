{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/posts/velog-markdown-uploader/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Devseon Blogs"}},"markdownRemark":{"id":"f6bbaca8-5835-5ca3-9419-e9227762f3a0","excerpt":"여기있는글을 벨로그로 옮기고싶다. 라는 목표로 개발시작 기능목표 적절한 옵션 보여주기 -d [폴더경로] : 게시물이 있는 폴더경로 -g [구글키] : 구글 API 키, 이곳에 모든 이미지를 업로드함 -o…","html":"<p>여기있는글을 벨로그로 옮기고싶다. 라는 목표로 개발시작</p>\n<h2>기능목표</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 적절한 옵션 보여주기\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> -d [폴더경로] : 게시물이 있는 폴더경로</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> -g [구글키] : 구글 API 키, 이곳에 모든 이미지를 업로드함</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> -o [결과물 폴더] : 결과물들을 저장할 폴더 지정</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 폴더에 올릴 파일 가져오기</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <del>구글드라이브에 이미지파일 올리기</del> aws에 파일올리기</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 마크다운 글을 <del>드라이브</del> S3에 올린 이미지링크로 변환하기</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 벨로그에 올려보기</li>\n</ul>\n<p>개발시작</p>\n<h2>1. 환경 세팅</h2>\n<ul>\n<li>Typescript로 개발하기 위해 구성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add -D ts-node nodemon typescript</code></pre></div>\n<ul>\n<li>tsconfig.json 구성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"node_modules/*\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"src/types/*\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"src/**/*\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>src 폴더에 app.ts 생성</li>\n<li>package.json 에 scripts 추가</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon src/app.ts\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2>2. <a href=\"https://github.com/tj/commander.js\">commander</a> - CommandLine interface 를 위하여</h2>\n<p>nodejs 프로그램에 args 옵션을 보여줄수 있는 라이브러리다.</p>\n<p>예제코드</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> program <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'commander'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprogram\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--first'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-s, --separator &lt;char>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprogram<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span><span class=\"token function\">opts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> limit <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>first <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>separator<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예제코드를 활용해 아래와 같이 구성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>program<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'commander'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  dir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  outDir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  googleKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> options<span class=\"token operator\">:</span> Options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  dir<span class=\"token operator\">:</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">,</span>\n  outDir<span class=\"token operator\">:</span> <span class=\"token string\">'./output'</span><span class=\"token punctuation\">,</span>\n  googleKey<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\nprogram\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-d, --dir &lt;string>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'검색할 폴더입니다. md 파일과 이미지파일을 읽어들입니다.'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-o, --outDir &lt;string>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'결과를 보여줄 폴더입니다.'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-g, --googleKey &lt;string>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'업로드를 위해 구글 키가 필요합니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> programOptions <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">opts</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Options<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>programOptions<span class=\"token punctuation\">.</span>googleKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Google key가 없습니다.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> programOptions<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>dir<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>outDir<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>googleKey<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>-d, —dir 로 검사할 폴더를 선택</li>\n<li>-o, —outDir 로 결과를 볼 폴더 선택</li>\n<li>-g, —googleKey 로 구글업로드를 위한 키를 받는다</li>\n</ul>\n<p>그러면 적절한 옵션 보여주기는 어느정도 마무리된것같으니 다음 스텝을 진행한다.</p>\n<hr>\n<h2>검사할 폴더 내 md 파일, 이미지파일 읽기</h2>\n<p>md파일과 이미지파일을 어떻게 읽어야할까?</p>\n<p>nodejs에는 fs와 os로 파일을 읽고 폴더내용들을 볼수 있는 방법이 있다.</p>\n<h2>markdown, 이미지 경로 분리해서 보여주기</h2>\n<p>함수기능을 구현해야 하기 떄문에 utils.ts 를 새로 생성헀다.</p>\n<p>단순하게 dir이 실행됬을떄 path를 찾을수 있도록 구현했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span>\n\n<span class=\"token comment\">/**\n * @param dir 검색할 폴더 위치\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getFiles</span> <span class=\"token punctuation\">(</span>dir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n  getFiles\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>process.cwd()는 process실행위치를 가져온다.</li>\n</ul>\n<p>현재 폴더 위치에서 가져와야할 md, png 파일들은 어떻게 알수 있을까?</p>\n<p>nodejs에는 os모듈이 있다. os모듈로 grep같은 명령어를 실행할수 있기 때문에\n파일목록들을 가져올수 있을거라 생각했다.</p>\n<p>내가 원하는 형태의 파일만 가져오기 위해서 떠오른건 regex고, 이를 활용해 가져올수있었다.</p>\n<p>readdir(dir) 로 폴더 내용물들을 볼수 있는데 depth를 깊게 들어갈 수 없었다.</p>\n<p>재귀를 이용해 내부까지 순회하는 코드를 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs/promises'</span>\n\n<span class=\"token comment\">/**\n * @param dir 검색할 폴더 위치\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFiles</span> <span class=\"token punctuation\">(</span>dir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> targetDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">_recursiveFindFiles</span><span class=\"token punctuation\">(</span>targetDir<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> filenameRegex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[.png|.md]$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * \n * @param dir 폴더위치\n * @returns 폴더 위치에서부터 내부 depth로 들어가 찾은 모든 파일들을 filenameRegex 필터링한값\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_recursiveFindFiles</span><span class=\"token punctuation\">(</span>dir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 폴더의 파일목록을 불러옴</span>\n  <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  \n  <span class=\"token comment\">// 불러온 파일들 순회</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> file <span class=\"token keyword\">of</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 파일의 정보를 가져온다.</span>\n    <span class=\"token keyword\">const</span> stat <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 파일이 폴더라면 내부 순회를 시작한다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stat<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> childResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">_recursiveFindFiles</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// childResult와 result를 병합한다.</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>childResult<span class=\"token punctuation\">]</span>\n\n      <span class=\"token comment\">// 파일이름에 .png, .md가 들어가있다면 결과에 경로를 추가한다.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filenameRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n  getFiles\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>원하는 결과를 얻을수 있었다.</p>\n<p><img src=\"https://velog-upload-bucket.s3.ap-northeast-2.amazonaws.com/content/blog/velog-markdown-uploader/result-find-files.png\" alt=\"result-find-files\"></p>\n<h2>구글드라이브에 파일 올리기</h2>\n<p>구글드라이브에 글을 올리기 전에 velog에서 구글드라이브글을 직접 올려보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">교차 출처 읽기 차단(CORB)으로 MIME 유형이 text/html인 교차 출처 응답(https://drive.google.com/file/d/.../view?usp=sharing)이 차단되었습니다. 자세한 내용은 https://www.chromestatus.com/feature/5629709824032768을 참고하세요.</code></pre></div>\n<p>맞다 CORS..</p>\n<p>어쩔수 없다 다른방법을 강구해보기로 했다.</p>\n<p>AWS S3는 CORS를 풀수있다.</p>\n<p>비용이 걱정이니 한번 비용을 찾아보기로 했다.</p>\n<h2>AWS S3 비용</h2>\n<h3>요청에 관한비용</h3>\n<p><img src=\"https://velog-upload-bucket.s3.ap-northeast-2.amazonaws.com/content/blog/velog-markdown-uploader/aws-request-pay.png\" alt=\"aws-request-pay.png\"></p>\n<p>GET 1000번 요청당 0.00035 달러 => 0.42 대한민국 원</p>\n<p>만명만 들어와도 4.2원..? 매우싸다</p>\n<h3>저장에 관한 비용</h3>\n<p>50GB - 0.025 USD => 30.10 대한민국 원</p>\n<p>이것 또한 천원도 안한다</p>\n<h3>전송에 관한 비용</h3>\n<p><img src=\"https://velog-upload-bucket.s3.ap-northeast-2.amazonaws.com/content/blog/velog-markdown-uploader/aws-network-pay.png\" alt=\"aws-network-pay.png\"></p>\n<ul>\n<li>처음 10TB/월\tGB당 0.126 USD => 151.71 대한민국 원</li>\n</ul>\n<p>다해서 한달에 200원..?\n안쓸 이유가 없다. AWS로 전환하기로 마음먹고 진행한다.</p>\n<h2>AWS S3 연결하기</h2>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/s3-node-examples.html\">https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/s3-node-examples.html</a></p>\n<p>aws-sdk를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add aws-sdk</code></pre></div>\n<p>문서에서 사용자 인증이 필요하다고 써있다.</p>\n<p>인증을 추가해보자</p>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/loading-node-credentials-shared.html\">https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/loading-node-credentials-shared.html</a></p>\n<p>aws console에 접속해서 내 닉네임 - 보안자격증명 - 사용자 에서 사용자를 추가한다.</p>\n<p>추가할때 s3 권한을 준다.</p>\n<p>그후 생긴 aws_access_key, aws_secret_access_key를 ~/.aws/credential 을 생성한다.</p>\n<p>위의 링크대로 작성하고 저장한다.</p>\n<p>나는 이름을 velog-uploader로 지정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token constant\">AWS</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">AWS</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">SharedIniFileCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>profile<span class=\"token operator\">:</span> <span class=\"token string\">'velog-uploader'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">AWS</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>credentials <span class=\"token operator\">=</span> credentials<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 서울 설정</span>\n<span class=\"token constant\">AWS</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>region<span class=\"token operator\">:</span> <span class=\"token string\">'ap-northeast-2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">const</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">AWS</span></span><span class=\"token punctuation\">.</span><span class=\"token constant\">S3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>apiVersion<span class=\"token operator\">:</span> <span class=\"token string\">'2022-02-01'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ns3<span class=\"token punctuation\">.</span><span class=\"token function\">listBuckets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>Buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>s3<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Success가 나온다면 정상적으로 연결된것이다.</p>\n<p>연결이 된걸 확인했으니 이제 버킷을 생성해볼 차례다.</p>\n<h2>AWS S3 버킷 생성하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">s3<span class=\"token punctuation\">.</span><span class=\"token function\">createBucket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>Bucket<span class=\"token operator\">:</span> <span class=\"token string\">'velog-upload-bucket'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>velog-upload-bucket을 생성했고 <a href=\"http://velog-upload-bucket.s3.amazonaws.com/\">http://velog-upload-bucket.s3.amazonaws.com/</a> 로 접속할수 있게 되었다.</p>\n<p>만약 한번더 실행한다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Your previous request to create the named bucket succeeded and you already own it.</code></pre></div>\n<p>위와같은 오류가 나며 실행되지 않는다.</p>\n<p>파일을 올릴 차례전, 생각을 해봐야하는건 중복파일에 관해 고민해봐야 할것같다.</p>\n<p>업로드할 파일들을 어떻게 해야 중복하지 않고 올릴수 있을까?</p>\n<p>다시말하면 꼭 필요한 파일만 올릴수 있는 방법이 없을까?</p>\n<p>생각나는 방법은 아래와 같았다.</p>\n<ul>\n<li>uuid, 유니크 아이디를 만들어낸다. but 시점마다 다르기 때문에 out</li>\n<li>파일 암호화하기. filePath는 모두 다르므로 암호화해서 올린다.</li>\n<li>그냥 filepath로 올리기</li>\n</ul>\n<p>그냥 세번째로 해도 될것같다. 대신 이름의 시작은 처음에 입력받은 dir로 하자.</p>\n<h2>업로드할 파일명 만들기</h2>\n<p>파일경로는 무조건 처음에 입력받은 dir이 포함되어 있기 떄문에</p>\n<p>아래와 같은 형태일것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.../dir/~~~~.png</code></pre></div>\n<p>indexOf로 dir을 찾고 filename.length 까지 끊어주면 될것같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span>dir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> filename<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아 젠장 dir이 ../content인 경우가 있다.</p>\n<p>path.basename()으로 dir을 감싸 content만 떼어온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span>dir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> filename<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>결과로 이렇게 불러올수있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    filepath<span class=\"token operator\">:</span> '<span class=\"token punctuation\">[</span>projectDir<span class=\"token punctuation\">]</span>/content/TIL/<span class=\"token number\">20220126</span>/index.md'<span class=\"token punctuation\">,</span>\n    s3Name<span class=\"token operator\">:</span> 'content/TIL/<span class=\"token number\">20220126</span>/index.md'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    filepath<span class=\"token operator\">:</span> '<span class=\"token punctuation\">[</span>projectDir<span class=\"token punctuation\">]</span>/gatsby-starter-blog/content/TIL/<span class=\"token number\">20220126</span>/kotlin-databinding.png'<span class=\"token punctuation\">,</span>\n    s3Name<span class=\"token operator\">:</span> 'content/TIL/<span class=\"token number\">20220126</span>/kotlin-databinding.png'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    filepath<span class=\"token operator\">:</span> '<span class=\"token punctuation\">[</span>projectDir<span class=\"token punctuation\">]</span>/gatsby-starter-blog/content/TIL/<span class=\"token number\">20220130</span>/index.md'<span class=\"token punctuation\">,</span>\n    s3Name<span class=\"token operator\">:</span> 'content/TIL/<span class=\"token number\">20220130</span>/index.md'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>아 이미지만 업로드할거다.\n지금 md파일과 이미지파일을 분리할 필요가 있다.</p>\n<p>_recursiveFindFiles에서 한번 파일루프를 돌기 때문에 이 함수에서 처리해주는게 맞는것같다.</p>\n<p>이런 리팩토링에 타입스크립트로 작성한 장점이 나온다.</p>\n<p>interface 하나를 선언한다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFileFindResult</span> <span class=\"token punctuation\">{</span>\n  md<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  img<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>_recursiveFindFiles 함수에 리턴타입을 준다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_recursiveFindFiles</span><span class=\"token punctuation\">(</span>dir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IFileFindResult<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>그러면 뭘 수정해야하는지 알려주는게 좋은것같다.</p>\n<p><img src=\"https://velog-upload-bucket.s3.ap-northeast-2.amazonaws.com/content/blog/velog-markdown-uploader/good-typescript.png\" alt=\"thanks-typescript\"></p>\n<p>_recursiveFindFiles를 새롭게 수정했다.\n이제 md와 이미지를 분리하여 가져올수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFileFindResult</span> <span class=\"token punctuation\">{</span>\n  md<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  img<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * \n * @param dir 폴더위치\n * @returns 폴더 위치에서부터 내부 depth로 들어가 찾은 모든 파일들을 filenameRegex 필터링한값\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_recursiveFindFiles</span><span class=\"token punctuation\">(</span>dir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IFileFindResult<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 폴더의 파일목록을 불러옴</span>\n  <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> IFileFindResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    md<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    img<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// 불러온 파일들 순회</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> file <span class=\"token keyword\">of</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 파일의 정보를 가져온다.</span>\n    <span class=\"token keyword\">const</span> stat <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 파일이 폴더라면 내부 순회를 시작한다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stat<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> childResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">_recursiveFindFiles</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// childResult와 result를 병합한다.</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        md<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">.</span>md<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>childResult<span class=\"token punctuation\">.</span>md<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        img<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>childResult<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 파일이름에 .png, .md가 들어가있다면 결과에 경로를 추가한다.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'.md'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span>md<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'.png'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>플로우 생각하기</h2>\n<p>이제 기능들은 어느정도 구현이 되었다.</p>\n<p>플로우를 고민해서 순차적으로 실행되도록 해볼 생각이다.</p>\n<ol>\n<li>S3 bucket 생성하기</li>\n<li>md, 이미지 파일 분리하기</li>\n<li>올릴 이미지 파일 이름정하기</li>\n<li>이미지 업로드하기</li>\n<li>업로드한 이미지 링크로 markdown에 대체하기</li>\n<li>대체한 markdown 파일을 output 폴더에 넣기 (index + 파일이름)</li>\n<li>velog에 올려보기</li>\n</ol>\n<p>이 플로우대로 리팩토링을 진행해본다.</p>\n<p>진행하면서 찾은건 aws-sdk에서 promise를 지원한다는것이다.</p>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/using-promises.html\">https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/using-promises.html</a></p>\n<p>괜히 프로미스로 감싸고있었다 ㅎ..</p>\n<p>업로드는 연속적으로 되므로 이건.. 수정할 필요가 있을것같다.</p>\n<p>이미 업로드된 이미지를 제외한 나머지만 올리는걸로 해서 구현하고싶은데\nn개의 이미지배열과 m개의 업로드된 이미지배열을 비교하는건 n*m번 검색할수도 있기 때문에.. 업로드이미지를 hashmap으로 바꾸고 검색하는 방식으로 구현해야 할것같다.</p>\n<p>filter의 순수함수를 만들어야 하므로 클로저를 활용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateUploadImageFilter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> images <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getListObjects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> searchMap <span class=\"token operator\">=</span> images<span class=\"token punctuation\">.</span>Contents<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">reduce</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resultImage<span class=\"token punctuation\">,</span> currentImage<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>resultImage<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>currentImage<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 필터 클로저함수 </span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>s3Name<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> UploadImageFilterType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> searchMap<span class=\"token punctuation\">[</span>s3Name<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메인 함수는 아래와 같이 구현했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">start</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// S3 bucket 생성하기</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'S3 bucket 생성하기'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">createBucket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'S3 bucket 생성하기'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'md, 이미지 파일 분리하기'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> findFiles <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getFileInfos</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>dir<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'md, 이미지 파일 분리하기'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Upload 이미지 필터 생성'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> uploadImageFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">generateUploadImageFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Upload 이미지 필터 생성'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'올릴 이미지 파일 이름정하기'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> uploadFiles <span class=\"token operator\">=</span> findFiles<span class=\"token punctuation\">.</span>img\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>filepath <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>filepath<span class=\"token punctuation\">,</span> s3Name<span class=\"token operator\">:</span> <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>dir<span class=\"token punctuation\">,</span> filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>uploadImageFilter<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'올릴 이미지 파일 이름정하기'</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uploadFiles<span class=\"token punctuation\">)</span>\n  uploadFiles<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>filepath<span class=\"token punctuation\">,</span> s3Name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s3Name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 업로드</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> s3Name<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s3Name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 업로드</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>순서대로 실행되도록 구성했다.</p>\n<p>이제 업로드까지 되는걸 확인했다.</p>\n<p>S3에 올린 이미지를 velog에서 잘 볼수있는지 확인해보자.</p>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/cors.html\">https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/cors.html</a></p>\n<p>velog만 접속 가능하도록 AllowedOrigins를 수정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"AllowedHeaders\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"*\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"AllowedMethods\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"HEAD\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"AllowedOrigins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"https://velog.io\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ExposeHeaders\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"x-amz-server-side-encryption\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"x-amz-request-id\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"x-amz-id-2\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"MaxAgeSeconds\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>버킷정책을 추가한다.\nS3로 권한없이 접속하기위해서는 아래와 같이 버킷정책이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"Sid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Statement1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Principal\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"s3:GetObject\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:s3:::velog-upload-bucket/*\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>s3의 velog-upload-bucket에서 있는 Object들을 모두 접근이 가능하다.</p>\n<p><img src=\"https://velog-upload-bucket.s3.ap-northeast-2.amazonaws.com/content/blog/velog-markdown-uploader/aws-s3-image-velog-upload.png\" alt=\"aws-s3-image-velog-upload\"></p>\n<p>올라갔다!</p>\n<p>이제 S3에 올라간 이미지가 올라가는걸 확인할수 있었다.</p>\n<p>다음은 markdown에 있는 이미지 링크들을 다 바꿔야 한다.</p>\n<h2>진행상황</h2>\n<ul class=\"contains-task-list\">\n<li>[v] S3 bucket 생성하기</li>\n<li>[v] md, 이미지 파일 분리하기</li>\n<li>[v] 올릴 이미지 파일 이름정하기</li>\n<li>[v] 이미지 업로드하기</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 업로드한 이미지 링크로 markdown에 대체하기</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 대체한 markdown 파일을 output 폴더에 넣기 (index + 파일이름)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> velog에 올려보기</li>\n</ul>","frontmatter":{"title":"여기 블로그 글 마크다운으로 변환하여 velog에 올릴수 있도록하기 (1)","date":"February 01, 2022","description":"당일치기 개발하기"}},"previous":{"fields":{"slug":"/blog-composer-project-02/"},"frontmatter":{"title":"Blog Composer Project (2)"}},"next":{"fields":{"slug":"/create-gatsby-blog-02/"},"frontmatter":{"title":"게츠비 블로그 만들기 2"}}},"pageContext":{"id":"f6bbaca8-5835-5ca3-9419-e9227762f3a0","previousPostId":"58b23bbb-5699-5281-a3db-16fafc33dcf7","nextPostId":"b0822d8f-78ff-5ab7-a704-6121eb2fed1f"}},
    "staticQueryHashes": ["2841359383","3257411868"]}